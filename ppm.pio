// Минимальная PIO-программа для формирования одиночного короткого импульса PPM
.program ppm
.side_set 1

; .wrap_target
;     // Ждем команду (pull) для формирования импульса
;     pull block      side 0
;     nop             side 1
;     nop             side 0

; .wrap

.wrap_target
    // Ждем команду (pull)
    pull block      side 0    // Считываем данные, выход в 0
    
    // Формируем 5-тактовый импульс с помощью цикла
    set x, 5        side 1    // Инициализация счетчика, первый такт импульса
pulse_loop:
    jmp x-- pulse_loop side 1 // Счетчик 8→0 = 9 итераций, еще 9 тактов импульса
    
    // Завершение импульса
    nop             side 0    // Сброс выхода в 0
.wrap

% c-sdk {
// Инициализация PIO для PPM (без изменений)
static inline void ppm_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {
    pio_sm_config c = ppm_program_get_default_config(offset);

    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    sm_config_set_set_pins(&c, pin, 1);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_sideset(&c, 1, false, false);  // 1-bit side-set, optional

    // Установить делитель частоты для PIO
    sm_config_set_clkdiv(&c, (float)clock_get_hz(clk_sys) / freq);

    // Настройка FIFO для более эффективной передачи
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    // Применение конфигурации и запуск
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

// Отправка одиночного импульса (теперь просто отправляем любое значение для запуска)
static inline void send_ppm_pulse(PIO pio, uint sm) {
    pio_sm_put_blocking(pio, sm, 0);
}
%}
